{"version":3,"sources":["api/api-reducers.tsx","common/constants.tsx","user/user-reducers.tsx","article/article-reducers.tsx","articles/articles-reducers.tsx","articlePost/articlePost-reducers.tsx","index-reducers.ts","api/endpoints.tsx","api/api.tsx","articlePost/articlePost-sagas.tsx","article/article-sagas.tsx","articles/articles-sagas.tsx","user/user-sagas.tsx","index-sagas.js","state/store.tsx","state/localStorage.tsx","state/history.tsx","utils/RouteProtected.tsx","header/Logo.tsx","header/LinkPrivate.tsx","header/Menu.tsx","user/UserLogout.tsx","user/user-actions.tsx","user/UserName.tsx","header/Header.tsx","user/UserProfile.tsx","user/UserLogin.tsx","utils/compareObjects.tsx","pager/PagerLink.tsx","pager/Pager.tsx","articles/Articles.tsx","api/api-actions.tsx","articles/articles-actions.tsx","common/TermLink.tsx","article/Article.tsx","article/article-actions.tsx","articlePost/ArticlePost.tsx","articlePost/articlePost-actions.tsx","App.tsx","index.tsx"],"names":["initialStore","loading","loaded","search","terms","urlParams","pager","first","last","next","prev","self","reducer","state","action","type","payload","initialState","current_user","uid","name","csrf_token","logout_token","article","data","images","files","tags","title","body","selected","vocabulary","console","log","map","item","value","id","label","IndexReducers","combineReducers","api","user","articlePost","articles","BASE","BASE_API","CSRF_TOKEN","LOGIN","LOGOUT","POST_TAG","ARTICLE_POST_FILE","ARTICLE_POST","NODE","INCLUDE","ARTICLES","params","FILTERS","split","term","FILTER","offset","limit","VOCABULARY","getCsrfToken","a","axios","endpoint","then","response","catch","error","undefined","message","Error","get","url","group","decodeURI","headers","withCredentials","timeout","groupEnd","statusText","status","login","options","method","JSON","stringify","post","token","postFile","file","logout","tokens","patch","delete","postArticleWorker","postArticleFileWorker","getVocabularyWorker","postTagWorker","root","put","call","putResolve","attributes","find","all","takeLatest","getArticleWorker","path","getArticlesWorker","createPagerObject","links","Object","keys","forEach","href","URLSearchParams","has","pagerObject","UserLoginWorker","userLoginWatcher","UserLogoutWorker","userLogoutWatcher","pass","credentials","take","fork","select","IndexSaga","articlePostWatcher","articleWatcher","articlesWatcher","sagaMiddleware","createSagaMiddleware","persistedState","serializedState","localStorage","getItem","parse","err","loadState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","IndexSagas","subscribe","getState","createBrowserHistory","RouteProtected","component","rest","isAuthenticated","useSelector","render","props","React","createElement","to","pathname","Logo","PrivateRoute","Menu","style","float","LinkPrivate","UserLogout","dispatch","useDispatch","onClick","UserName","fontStyle","Header","UserProfile","UserLogin","useState","setName","setPass","onSubmit","event","preventDefault","userLoginRequest","placeholder","onChange","e","target","isObject","object","connect","Pager","disabled","Articles","storeParams","query","useLocation","parseInt","page","items","useEffect","compareObjects","object1","object2","keys1","keys2","length","key","val1","val2","areObjects","getArticles","i","field_tags","image","field_image","image_style_uri","thumbnail","marginBottom","alias","src","alt","TermLink","thePath","substring","lastIndexOf","Article","useParams","created","uri","lenght","tag","ArticlePost","error_upload","setErrorUpload","getUploadParams","meta","postArticle","margin","multiple","maxFiles","onChangeStatus","fileWithMeta","xhr","onreadystatechange","readyState","result","hasOwnProperty","remove","accept","inputContent","extra","reject","styles","dropzoneReject","borderColor","backgroundColor","inputLabel","color","isMulti","isClearable","ids","x","setArticleTags","onCreateOption","padding","App","className","exact","setItem","saveState","ReactDOM","history","document","getElementById"],"mappings":"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","file":"static/js/main.4156dd3c.chunk.js","sourcesContent":["import { Reducer } from 'redux';\n\nimport {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  SET_LOADED_TRUE,\n  SET_LOADED_FALSE,\n  SET_API_URL_PARAMS,\n  SET_API_PAGER_LINKS,\n} from '../common/constants'\n\nimport { IApiActions, IApiState } from './api-types'\n\nconst initialStore = {\n  loading: false,\n  loaded: false,\n  search: '',\n  terms: [],\n  urlParams: '',\n  pager: {\n    first: 0,\n    last: 0,\n    next: 0,\n    prev: 0,\n    self: 0,\n  },\n}\n\nconst reducer: Reducer<IApiState, IApiActions> = (\n  state = initialStore,\n  action: IApiActions\n) => {\n  switch (action.type) {\n\n    case SET_LOADING_ON:\n      return { ...state, loading: true };\n\n    case SET_LOADING_OFF:\n      return { ...state, loading: false };\n\n    case SET_LOADED_TRUE:\n      return { ...state, loaded: true };\n\n    case SET_LOADED_FALSE:\n      return { ...state, loaded: false };\n\n    case SET_API_URL_PARAMS:\n      return {\n        ...state,\n        urlParams: action.payload\n      };\n\n    case SET_API_PAGER_LINKS:\n      return {\n        ...state,\n        pager: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","// ---------------------------------------------- API\nexport const SET_LOADING_ON = 'SET_LOADING_ON'\nexport const SET_LOADING_OFF = 'SET_LOADING_OFF'\nexport const SET_LOADED_TRUE = 'SET_LOADED_TRUE'\nexport const SET_LOADED_FALSE = 'SET_LOADED_FALSE'\nexport const SET_API_URL_PARAMS = 'SET_API_URL_PARAMS'\nexport const SET_API_PAGER_LINKS = 'SET_API_PAGER_LINKS'\n\n// ---------------------------------------------- USER\nexport const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST'\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS'\nexport const USER_LOGIN_FAILURE  = 'USER_LOGIN_FAILURE'\n\nexport const USER_GET_DATA = 'USER_GET_DATA'\nexport const USER_SET_DATA = 'USER_SET_DATA'\n\nexport const USER_LOGOUT_REQUEST = 'USER_LOGOUT_REQUEST'\nexport const USER_LOGOUT_SUCCESS = 'USER_LOGOUT_SUCCESS'\nexport const USER_LOGOUT_FAILURE  = 'USER_LOGOUT_FAILURE'\n\n// ---------------------------------------------- ARTICLES\nexport const GET_ARTICLES = 'GET_ARTICLES'\nexport const SET_ARTICLES = 'SET_ARTICLES'\n\n// ---------------------------------------------- ARTICLE\nexport const GET_ARTICLE = 'GET_ARTICLE'\nexport const SET_ARTICLE = 'SET_ARTICLE'\n// ---------------------------------------------- ARTICLE POST\nexport const POST_ARTICLE = 'POST_ARTICLE'\nexport const POST_ARTICLE_FILE = 'POST_ARTICLE_FILE'\nexport const POST_TAG = 'POST_TAG'\n\nexport const SET_ARTICLE_FILE = 'SET_ARTICLE_FILE'\nexport const SET_ARTICLE_TITLE = 'SET_ARTICLE_TITLE'\nexport const SET_ARTICLE_BODY = 'SET_ARTICLE_BODY'\nexport const SET_ARTICLE_TAGS = 'SET_ARTICLE_TAGS'\nexport const ADD_ARTICLE_TAGS = 'ADD_ARTICLE_TAGS'\n\nexport const SET_SELECTED = 'SET_SELECTED'\nexport const GET_SELECTED = 'GET_SELECTED'\nexport const ADD_SELECTED = 'ADD_SELECTED'\n\n// ---------------------------------------------- TERM\nexport const GET_TERMS = 'GET_TERMS'\nexport const SET_TERMS = 'SET_TERMS'\nexport const GET_VOCABULARY = 'GET_VOCABULARY'\nexport const SET_VOCABULARY = 'SET_VOCABULARY'","import { Reducer } from 'redux';\n\nimport {\n  // USER_LOGIN_REQUEST,\n  // USER_LOGIN_SUCCESS,\n  // USER_LOGIN_FAILURE,\n  // USER_GET_DATA,\n  USER_SET_DATA,\n  // USER_LOGOUT_REQUEST,\n  USER_LOGOUT_SUCCESS,\n  // USER_LOGOUT_FAILURE,\n  // USER_GET_STATUS,\n} from '../common/constants'\n\nimport { IUserState, IUserActions } from './user-types'\n\nconst initialState = {\n  current_user: {\n    uid: 0,\n    name: 'anonymous'\n  },\n  csrf_token: '',\n  logout_token: '',\n}\n\nconst reducer: Reducer<IUserState, any> = (\n  state = initialState,\n  action: IUserActions\n) => {\n  switch (action.type) {\n\n    case USER_SET_DATA:\n      return {\n        ...state,\n        current_user: action.payload.current_user,\n        csrf_token: action.payload.csrf_token,\n        logout_token: action.payload.logout_token,\n      };\n\n    case USER_LOGOUT_SUCCESS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import {\n  SET_ARTICLE,\n} from '../common/constants'\n\nconst reducer = (\n  state = {\n    article: {\n      data: []\n    }\n  },\n  action: any\n) => {\n  switch (action.type) {\n\n    case SET_ARTICLE:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { SET_ARTICLES } from '../common/constants'\n\nconst reducer = (\n  state = { data: ''},\n  action: any\n) => {\n  switch (action.type) {\n\n    case SET_ARTICLES:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import {\n  POST_ARTICLE,\n  POST_ARTICLE_FILE,\n  SET_ARTICLE_FILE,\n  SET_ARTICLE_TITLE,\n  SET_ARTICLE_BODY,\n  SET_ARTICLE_TAGS,\n  ADD_ARTICLE_TAGS,\n  SET_VOCABULARY,\n  SET_SELECTED,\n  ADD_SELECTED,\n} from '../common/constants'\n\nconst reducer = (\n  state = {\n    images: [],\n    files: [],\n    tags: [],\n    title: '',\n    body: '',\n    selected: [],\n    vocabulary: [],\n  },\n  action: any\n) => {\n  switch (action.type) {\n\n    case POST_ARTICLE:\n      console.log(\"POST_ARTICLE\");\n      return action.payload;\n\n    case POST_ARTICLE_FILE:\n      console.log(\"POST_ARTICLE_FILE\");\n      return action.payload;\n\n    case SET_ARTICLE_TITLE:\n      return { ...state, title: action.payload }\n\n    case SET_ARTICLE_BODY:\n      return { ...state, body: action.payload }\n\n    case SET_SELECTED:\n      console.log(\"SET_SELECTED\", action.payload);\n      return {\n        ...state,\n        selected: action.payload\n      }\n\n    case ADD_SELECTED:\n      return {\n        ...state,\n        selected: [...state.selected, action.payload]\n      }\n\n    case SET_ARTICLE_TAGS:\n      return { ...state, tags: action.payload }\n\n    case ADD_ARTICLE_TAGS:\n      return {\n        ...state,\n        tags: [...state.tags, action.payload]\n      }\n\n    case SET_VOCABULARY:\n      /**\n       * @param {string[]} terms - named 'value' instead of 'id'\n       *     for the needs of the react-select component\n       */\n      const terms = action.payload.data.map((item: any) => (\n        { value: item.id, label: item.name }\n      ))\n      return { ...state, vocabulary: terms }\n\n    case SET_ARTICLE_FILE:\n      console.log(\"SET_ARTICLE_FILE\");\n      const id = action.payload;\n      const files = {\n        ...state.images,\n        id,\n      };\n      return {\n        ...state,\n        files,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { combineReducers } from 'redux'\n\nimport api from './api/api-reducers'\nimport user from './user/user-reducers'\nimport article from './article/article-reducers'\nimport articles from './articles/articles-reducers'\nimport articlePost from './articlePost/articlePost-reducers'\n\nconst IndexReducers = combineReducers({\n  api,\n  user,\n  article,\n  articlePost,\n  articles,\n})\n\nexport type AppState = ReturnType<typeof IndexReducers>\n\nexport default IndexReducers;\n","/** BACKEND */\nexport const BASE = \"http://192.168.1.111:444\"\n// export const BASE = \"https://stevaidis.mywire.org:444\"\nexport const BASE_API = `${BASE}/jsonapi`\nexport const CSRF_TOKEN = `${BASE}/session/token`\n\n/** USER */\nexport const LOGIN = `${BASE}/user/login?_format=json`\nexport const REGISTER = `${BASE}/user/register?_format=json`\nexport const STATUS = `${BASE}/user/login_status?_format=json`\nexport const LOGOUT = `${BASE}/user/logout?_format=json`\n\n/** ARTICLE */\nexport const ARTICLE = (path: any) => `${BASE_API}/node/article?include=field_image,field_tags,uid&filter[field_path][value]=/article/${path.payload.path}`\nexport const POST_TAG = `${BASE_API}/taxonomy_term/tags`\nexport const ARTICLE_POST_FILE = `${BASE_API}/node/article/field_image`\nexport const ARTICLE_POST = `${BASE_API}/node/article`\n\n/** ARTICLES */\nconst NODE = '/node/article'\nconst INCLUDE = '?query_string=&include=field_image,field_tags,uid'\nconst OFFSET = '&page[offset]='\nconst LIMIT = '&page[limit]='\nconst SORT = '&sort[sort-created][path]=created'\nconst FILTER = (term: string) => `&filter[taxonomy_term--tags][condition][path]=field_tags.name&filter[taxonomy_term--tags][condition][operator]=IN&filter[taxonomy_term--tags][condition][value][]=${term}`\nexport const ARTICLES = (params: any) => {\n  if (params.terms !== \"\") {\n    console.log(\"endpoints.js > ARTICLES > params.terms:\", params)\n    var FILTERS:any = '';\n    params.terms.split(',').map((term: string) => {\n      return (\n        FILTERS = FILTERS + FILTER(term)\n      )\n    })\n    return `${BASE_API}${NODE}${INCLUDE}${SORT}${OFFSET}${params.offset}${LIMIT}${params.limit}${FILTERS}`\n  }\n  console.log(\"endpoints.js > ARTICLES > params:\", params)\n  return `${BASE_API}${NODE}${INCLUDE}${LIMIT}${params.limit}${OFFSET}${params.offset}`\n}\n\n/** VOCABULARY */\nexport const VOCABULARY = (vocabulary: any) => `${BASE_API}/taxonomy_term/${vocabulary}`;","import axios from 'axios';\nimport * as endpoint from './endpoints'\n\n/**\n * GET a csrf token\n *\n * Differect token every time for anonymous users\n * The same token for loggen in users\n *\n * used by: api functions\n * using: url of token endpoint\n *\n * @return {string} The csrf token\n */\nexport const getCsrfToken = async () => {\n  const csrf_token = await axios(endpoint.CSRF_TOKEN)\n    .then(response => response.data)\n    .catch((error) => {\n      if (error.message === undefined) {\n        error.message = \"Connection Timeout\"\n      }\n      throw new Error(error)\n    });\n  return csrf_token\n}\n\nexport const api = {\n  /**\n   * GET request\n   *\n   * @param {string} url - The backend url\n   * @return {object}      The backend response\n   */\n  get: async function get(url: string) {\n    console.group(\"api.get\", decodeURI(url))\n    return axios.get(url, {\n      headers: {\n        \"Content-Type\": \"application/hal+json\",\n        \"X-CSRF-Token\": await getCsrfToken(),\n      },\n      withCredentials: true,\n      timeout: 5000,\n    })\n      .then(response => {\n        console.log('response', response); console.groupEnd();\n        return response\n      })\n      .catch(error => {\n        throw new Error(\n          `${error.response.statusText} (${error.response.status})`\n        );\n      });\n  },\n  login: async function login(url: string, data: object) {\n    /**\n     * POST request for login\n     *\n     * @param {string} url  - The backend url\n     * @param {object} data - The body of POST request\n     * @return {object}       The backend response\n     */\n    const csrf_token = await getCsrfToken()\n    if (csrf_token !== \"Connection Error\") {\n      const options: object = {\n        url: url,\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/hal+json\",\n          \"X-CSRF-Token\": csrf_token,\n        },\n        withCredentials: true,\n        timeout: 2000,\n        data: JSON.stringify(data),\n      }\n      return axios(options)\n        .then(response => response)\n        .catch(error => {\n          throw new Error(`${error.response.statusText} (${error.response.status})`);\n        });\n    }\n  },\n  /**\n   * POST request for new articles\n   *\n   * @param {string} url        - The backend url endpoint\n   * @param {object} data       - The body of POST request\n   * @param {string} csrf_token - CSRF token of the logged in user from redux store\n   * @return {object}             The backend response\n   */\n  post: async function post(url: string, data: string, csrf_token: string) {\n    const token = csrf_token ? csrf_token : await getCsrfToken()\n    const options: object = {\n      url: url,\n      method: 'post',\n      headers: {\n        \"Content-Type\": \"application/vnd.api+json\",\n        \"X-CSRF-Token\": token,\n      },\n      withCredentials: true,\n      timeout: 2000,\n      data: JSON.stringify(data),\n    }\n    return axios(options)\n      .then(\n        response => {\n          console.log('response', response.data)\n          return response\n        })\n      .catch(error => {\n        throw new Error(\"Conection time out\");\n      });\n  },\n  /**\n   * POST request for uploading files\n   *\n   * @param {string} url        - The backend url\n   * @param {string} file       - The filename\n   * @param {object} data       - The body of POST request\n   * @param {string} csrf_token - From the logged in user\n   * @return {object}             The backend response\n   */\n  postFile: async function postFile(url: string, file: string, data: object, csrf_token: string) {\n    const token = csrf_token ? csrf_token : await getCsrfToken()\n    const options: object = {\n      url: url,\n      method: 'post',\n      headers: {\n        \"Accept\": \"application/vnd.api+json\",\n        \"Content-Type\": \"application/octet-stream\",\n        \"X-CSRF-Token\": token,\n        \"Content-Disposition\": \"file; filename=\\\"\" + file + \"\\\"\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Accept-Language\": \"en-US,en;q=0.9\",\n        \"Connection\": \"keep-alive\",\n      },\n      withCredentials: true,\n      timeout: 2000,\n      data: data,\n    }\n    return axios(options)\n      .then(response => response)\n      .catch(error => {\n        throw new Error(\"Conection time out\");\n      });\n  },\n  /**\n   * POST logout\n   *\n   * @param {string} url  - The backend url\n   * @param {object} data - CSRF and logout tokens\n   * @return {object}       The backend response\n   */\n  logout: async function logout(url: string, tokens: any) {\n    console.log(\"api.logout(url, tokens): \", decodeURI(url), tokens)\n    const csrf_token: any = getCsrfToken()\n    if (csrf_token !== \"Connection Error\") {\n      const logout_token = tokens.logout_token\n      const csrf_token = tokens.csrf_token\n      const options: object = {\n        url: url + \"&token=\" + logout_token + \"&csrf_token=\" + csrf_token,\n        method: 'post',\n        headers: {\n          \"Content-Type\": \"application/hal+json\",\n          \"X-CSRF-Token\": csrf_token,\n        },\n        withCredentials: true,\n        timeout: 2000,\n      }\n      return axios(options).then(response => response)\n        .catch(error => {\n          throw new Error(\"Conection time out\");\n        });\n    }\n  },\n  patch: function patch(url: string, data: object) {\n    console.log(\"api.patch \", url, data);\n  },\n  delete: function del(url: string, data: object) {\n    console.log(\"api.delete \", url, data);\n  }\n}","import {\n  all,\n  takeLatest,\n  call,\n  put,\n  putResolve\n} from 'redux-saga/effects';\n\nimport {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  POST_ARTICLE,\n  POST_ARTICLE_FILE,\n  POST_TAG,\n  SET_LOADED_TRUE,\n  SET_LOADED_FALSE,\n  SET_VOCABULARY,\n  GET_VOCABULARY,\n  ADD_SELECTED,\n  ADD_ARTICLE_TAGS,\n} from '../common/constants'\n\nimport { api } from '../api/api';\nimport * as endpoint from '../api/endpoints'\n\nfunction* postArticleWorker(payload: any) {\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  try {\n    const csrf_token = yield call(api.get, endpoint.CSRF_TOKEN);\n    // console.group(\"postTagWorker call api.get csrf_token\", csrf_token.data);\n    const response = yield call(api.post, endpoint.ARTICLE_POST, payload.payload, csrf_token.data);\n    console.group(\"postArticleWorker response\", response);\n    yield put({ type: SET_LOADED_TRUE })\n  } catch (error) {\n    console.log(\"postArticleWorker error\", error);\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nfunction* postArticleFileWorker(payload: any) {\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  try {\n    const csrf_token = yield call(api.get, endpoint.CSRF_TOKEN);\n    console.group(\"postArticleFileWorker payload\", payload);\n    const response = yield call(\n      api.postFile,\n      endpoint.ARTICLE_POST_FILE,\n      payload.file,\n      payload.data, csrf_token.data\n    );\n    console.group(\"postArticleFileWorker response\", response);\n    yield put({ type: SET_LOADED_TRUE })\n  } catch (error) {\n    console.log(\"postArticleWorker error\", error);\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nfunction* getVocabularyWorker(payload: any) {\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  console.log(\"getVocabularyWorker payload\",payload);\n  try {\n    // const response = yield call(api.get, endpoint.VOCABULARY(payload.payload));\n    const response = yield call(api.get, endpoint.VOCABULARY(payload.payload));\n    console.log(\"getVocabularyWorker response\", response);\n    yield put({ type: SET_VOCABULARY, payload: response.data });\n    yield put({ type: SET_LOADED_TRUE })\n  } catch (error) {\n    console.log(\"getVocabularyWorker error\", error);\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nfunction* postTagWorker(payload: any) {\n  console.group(\"--- postTagWorker payload\", payload);\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  try {\n    /** get CSRF token */\n    const csrf_token = yield call(api.get, endpoint.CSRF_TOKEN);\n    console.log(\"1/6 postTagWorker GET csrf_token\", csrf_token.data);\n\n    /** post new term */\n    const response = yield call(api.post, endpoint.POST_TAG, payload.payload, csrf_token.data);\n    console.log(\"2/6 postTagWorker POST response\", response);\n\n    /** get fresh vocabulary */\n    const vocabulary = yield call(api.get, endpoint.VOCABULARY('tags'));\n    console.log(\"3/6 postTagWorker SET_VOCABULARY\", vocabulary);\n    yield putResolve({ type: SET_VOCABULARY, payload: vocabulary.data })\n\n    /** add new term to selected terms */\n    const name = payload.payload.data.attributes.name;\n    console.log(\"4/6 postTagWorker name\", name);\n\n    const id = vocabulary.data.data.find((item: any) => {\n      return item.name === name\n    })\n    const body = { value: id.id, label: name }\n    console.log(\"5/6 postTagWorker ADD_SELECTED body\", body);\n    yield put({ type: ADD_SELECTED, payload: body });\n\n    const tags = { \"type\": \"taxonomy_term--tags\", \"id\": id.id }\n    yield put({ type: ADD_ARTICLE_TAGS, payload: tags });\n    console.log(\"6/6 postTagWorker ADD_ARTICLE_TAGS tags\", tags);\n\n    yield put({ type: SET_LOADED_TRUE })\n    console.groupEnd();\n  } catch (error) {\n    console.log(\"postTagWorker error\", error);\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nexport default function* root() {\n  yield all([\n    takeLatest(POST_ARTICLE, postArticleWorker),\n    takeLatest(POST_ARTICLE_FILE, postArticleFileWorker),\n    takeLatest(POST_TAG, postTagWorker),\n    takeLatest(GET_VOCABULARY, getVocabularyWorker),\n  ]);\n}","import {\n  all,\n  takeLatest,\n  call,\n  put\n} from 'redux-saga/effects';\n\nimport {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  GET_ARTICLE,\n  SET_ARTICLE,\n  SET_LOADED_TRUE,\n  SET_LOADED_FALSE,\n} from '../common/constants'\n\nimport {\n  IGetArticle,\n} from './article-types'\n\nimport { api } from '../api/api';\nimport * as endpoint from '../api/endpoints'\n\n/**\n * GET the article and save it in redux store\n * @param {object} payload - standar redux action\n */\nfunction* getArticleWorker(payload: IGetArticle) {\n  console.log(\"article-sagas.js getArticleWorker payload\", payload);\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  try {\n    const article = yield call(api.get, endpoint.ARTICLE(payload));\n    // console.log(\"article-sagas.js getArticleWorker article\", article);\n    yield put({ type: SET_ARTICLE, payload: article.data });\n    yield put({ type: SET_LOADED_TRUE })\n  } catch (error) {\n    console.log(\"article-sagas.js getArticleWorker error\", error);\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nexport default function* root() {\n  yield all([\n    takeLatest(GET_ARTICLE, getArticleWorker),\n  ]);\n}","import {\n  all,\n  takeLatest,\n  call,\n  put\n} from 'redux-saga/effects';\n\nimport {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  SET_LOADED_TRUE,\n  SET_LOADED_FALSE,\n  GET_ARTICLES,\n  SET_ARTICLES,\n  SET_API_PAGER_LINKS,\n} from '../common/constants'\n\nimport { api } from '../api/api';\nimport * as endpoint from '../api/endpoints'\n\n/**\n * Create the pager links from GET_ARTICLE response\n *\n * @param {object} links - Pager data from backend\n * @returns {object} pager - Stored in store.api.pager\n */\nconst createPagerObject = (links: any) => {\n  var pager: any = {\n    first: '',\n    prev: '',\n    next: '',\n    self: '',\n  }\n\n  Object.keys(links)\n    .forEach(function (item) {\n      pager[item] = links[item].href\n      const params = new URLSearchParams(pager[item])\n      if (params.has('page[offset]')) {\n        pager[item] = params.get('page[offset]');\n      }\n    })\n  return pager\n}\n\nfunction* getArticlesWorker({ payload }: any) {\n  yield put({ type: SET_LOADING_ON })\n  yield put({ type: SET_LOADED_FALSE })\n  try {\n    const response = yield call(api.get, endpoint.ARTICLES(payload));\n    yield put({ type: SET_ARTICLES, payload: response.data });\n\n    const pagerObject = createPagerObject((response.data.links))\n    yield put({ type: SET_API_PAGER_LINKS, payload: pagerObject });\n\n    yield put({ type: SET_LOADED_TRUE })\n\n  } catch (error) {\n    yield put({ type: SET_LOADED_FALSE })\n\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nexport default function* root() {\n  yield all([\n    takeLatest(GET_ARTICLES, getArticlesWorker),\n  ]);\n}\n","import {\n  select,\n  fork,\n  take,\n  call,\n  put,\n} from 'redux-saga/effects';\n\nimport {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  USER_LOGIN_REQUEST,\n  // USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAILURE,\n  // USER_GET_DATA,\n  USER_SET_DATA,\n  USER_LOGOUT_REQUEST,\n  USER_LOGOUT_SUCCESS,\n  USER_LOGOUT_FAILURE,\n} from '../common/constants'\n\nimport { api } from '../api/api';\nimport * as endpoint from '../api/endpoints'\nimport { ICredentials } from './user-types'\nimport { ILoginRersponse } from './user-types'\n\n/**\n * Login the user and save the response to redux store\n *\n * Using:  api.login and credentials\n *\n * @param {String} name    Username\n * @param {String} pass    Password\n */\nfunction* UserLoginWorker({name, pass}: ICredentials) {\n  const credentials = {\n    \"name\": name,\n    \"pass\": pass,\n  }\n  yield put({ type: SET_LOADING_ON })\n  try {\n    const response: ILoginRersponse = yield call(api.login, endpoint.LOGIN, credentials)\n    yield put({ type: USER_SET_DATA, payload: response.data });\n  } catch (error) {\n    yield put({ type: USER_LOGIN_FAILURE });\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nexport function* userLoginWatcher() {\n  while (true) {\n    const payload = yield take(USER_LOGIN_REQUEST);\n    yield fork(UserLoginWorker, payload)\n  }\n}\n\n/**\n * Logout the user\n *\n * Using: api.logout, csrf and logout tokens\n */\nfunction* UserLogoutWorker() {\n  yield put({ type: SET_LOADING_ON })\n  try {\n    const state = yield select()\n    const tokens = {\n      logout_token: state.user.logout_token,\n      csrf_token: state.user.csrf_token,\n    }\n    yield call(api.logout, endpoint.LOGOUT, tokens);\n    yield put({ type: USER_LOGOUT_SUCCESS });\n  } catch (error) {\n    yield put({ type: USER_LOGOUT_FAILURE });\n  } finally {\n    yield put({ type: SET_LOADING_OFF })\n  }\n}\n\nexport function* userLogoutWatcher() {\n  while (true) {\n    yield take(USER_LOGOUT_REQUEST)\n    yield call(UserLogoutWorker);\n  }\n}","import { all } from 'redux-saga/effects';\n\nimport articlePostWatcher from './articlePost/articlePost-sagas'\nimport articleWatcher from './article/article-sagas'\nimport articlesWatcher from './articles/articles-sagas'\nimport { userLoginWatcher } from './user/user-sagas'\nimport { userLogoutWatcher } from './user/user-sagas'\n\nexport default function* IndexSaga() {\n  yield all([\n    articlePostWatcher(),\n    articleWatcher(),\n    articlesWatcher(),\n    userLoginWatcher(),\n    userLogoutWatcher(),\n  ]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, compose } from 'redux';\n\nimport { loadState } from './localStorage'\nimport IndexReducers from '../index-reducers'\nimport IndexSagas from '../index-sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst persistedState = loadState();\n\n//\n// Redux DevTools\n// https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools\n// https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\n//\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\ndeclare const window: any;\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  IndexReducers,\n  persistedState,\n  composeEnhancers(applyMiddleware(sagaMiddleware)\n  ));\n\nsagaMiddleware.run(IndexSagas)\n\nstore.subscribe(() => {\n  window.api = store.getState().api;\n\n});\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state.store');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state.store);\n    localStorage.setItem('state.store', serializedState);\n  } catch (err) {\n  }\n};","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { useSelector } from \"react-redux\";\nimport { Route } from 'react-router-dom';\n\nimport { AppState } from '../index-reducers'\n\ninterface IProps {\n    path: string;\n    component: any;\n}\n/**\n * Render the component if the user is logged in\n *\n * @param {component} destination component\n */\nconst RouteProtected = ({component, ...rest}: any) => {\n    const user = useSelector((state: AppState) => state.user);\n    const isAuthenticated = user.current_user.uid === 0 ? false : true;\n\n    const routeComponent = (props: any) => (\n        isAuthenticated\n            ? React.createElement(component, props)\n            : <Redirect to={{pathname: '/user/login'}}/>\n    );\n    return <Route {...rest} render={routeComponent}/>;\n}\n\nexport default RouteProtected;","import React from 'react';\nimport { Link } from \"react-router-dom\"\n\n/**\n * Renders the site logo\n *\n * Used by the Header.tsx\n *\n * @return {string} HTML element of logo\n */\nconst Logo: React.FC = () => {\n    return (\n        <div id=\"Logo\">\n            <h1><Link to={\"/\"}>Logo</Link></h1>\n        </div>\n    )\n}\n\nexport default Logo;","import React from 'react';\nimport { Link } from \"react-router-dom\"\nimport { useSelector } from \"react-redux\";\nimport { AppState } from './../index-reducers'\n\ninterface IProps {\n  to: any;\n  label: any;\n}\n\n/**\n * Render or not the menu item according\n * the user if it is logged in or not\n *\n * Used by menu.tsx\n *\n * @param {string} user   - user object from redux state\n * @param {string} to     - destination url\n * @param {string} label  - what the user see\n * @return {string}         html of the menu item\n */\nconst PrivateRoute: React.FC<IProps> = ({\n  to,\n  label,\n}) => {\n\n  const user = useSelector((state: AppState) => state.user);\n  const isAuthenticated = user.current_user.uid === 0 ? false : true\n\n  if (isAuthenticated) {\n    return <Link to={to}>{label}</Link>\n  } else {\n    return null\n  }\n};\n\nexport default PrivateRoute;","import React from 'react';\nimport { Link } from \"react-router-dom\"\nimport LinkPrivate from './LinkPrivate'\n\n/**\n * Renders Main menu in the header\n *\n * Used by the Header.tsx\n *\n * @return {string} HTML for menu\n */\nconst Menu: React.FC = () => {\n  return (\n    <div id=\"Menu\">\n      <Link to=\"/\">Home</Link>\n      <div style={{ float: 'right' }}>\n        <Link to=\"/user/login\">Login</Link>\n        <LinkPrivate to=\"/article/create\" label=\"Post Article\" />\n      </div>\n    </div>\n  )\n}\n\nexport default Menu;","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { userLogoutRequest } from './user-actions'\nimport { Link } from \"react-router-dom\";\n\nimport { AppState } from '../index-reducers'\n\n/**\n * Logout user\n *\n * Using: csrf and logout tokens\n *\n * @param {Number} uid                        the id of the current user\n * @param {Funtion} dispatchUserLogoutRequest tell saga worker to logout\n */\nconst UserLogout: React.FC = () => {\n  const dispatch = useDispatch();\n  const uid = useSelector((state: AppState) => state.user.current_user.uid);\n  return (\n    <div>\n      { uid !== 0 && (\n        <Link\n          onClick={() => dispatch(userLogoutRequest())}\n          to={'#'}\n        >\n          logout\n        </Link>\n      )}\n    </div>\n  );\n}\n\nexport default UserLogout;","import {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAILURE,\n  USER_GET_DATA,\n  USER_SET_DATA,\n  USER_LOGOUT_REQUEST,\n  USER_LOGOUT_SUCCESS,\n  USER_LOGOUT_FAILURE,\n} from '../common/constants'\n\nimport {\n  IUserLoginRequest,\n  IUserLoginSuccess,\n  IUserLoginFailure,\n  IUserGetData,\n  IUserSetData,\n  IUserLogoutFailure,\n} from './user-types'\n\n// -------------------------------------------- LOGIN\nexport const userLoginRequest = (payload: IUserLoginRequest) => ({\n  type: USER_LOGIN_REQUEST,\n  name: payload.name,\n  pass: payload.pass,\n});\n\nexport const userLoginSuccess = (payload: IUserLoginSuccess) => ({\n  type: USER_LOGIN_SUCCESS,\n  payload\n});\n\nexport const userLoginFailure = (payload: IUserLoginFailure) => ({\n  type: USER_LOGIN_FAILURE,\n  payload\n});\n\n// -------------------------------------------- DATA\nexport const userGetData = (payload: IUserGetData) => ({\n  type: USER_GET_DATA,\n  payload\n});\n\nexport const userSetData = (payload: IUserSetData) => ({\n  type: USER_SET_DATA,\n  payload\n});\n\n// -------------------------------------------- LOGOUT\nexport const userLogoutRequest = () => ({\n  type: USER_LOGOUT_REQUEST\n});\n\nexport const userLogoutSuccess = () => ({\n  type: USER_LOGOUT_SUCCESS,\n});\n\nexport const userLogoutFailure = (payload: IUserLogoutFailure) => ({\n  type: USER_LOGOUT_FAILURE,\n  payload\n});","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { AppState } from '../index-reducers'\nimport UserLogout from './UserLogout'\n\nconst UserName: React.FC = () => {\n  const user = useSelector((state: AppState) => state.user.current_user);\n\n  return (\n    <div style={{ fontStyle: \"italic\" }}>\n      Hello\n      {\n        user.uid !== 0\n          ? <div>\n            <Link to=\"/user/profile\"> {user.name} </Link>\n            <UserLogout />\n          </div>\n          : ' Anonymous'\n      }\n    </div>\n  );\n}\n\nexport default UserName;","import React from 'react';\n\nimport Logo from './Logo'\nimport Menu from './Menu'\nimport UserName from '../user/UserName'\n\n/**\n * Renders the site header\n *\n * Using: Logo, Menu, UserName\n * Used by: App.tsx\n *\n * @return {string} HTML element of menu\n */\nconst Header: React.FC = () => {\n  return (\n    <div id=\"header\">\n      <Logo />\n      <Menu />\n      <UserName />\n    </div>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { AppState } from '../index-reducers'\n\n/**\n * Renders a page that shows the user data\n */\nconst UserProfile: React.FC = () => {\n  const user = useSelector((state: AppState) => state.user);\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <pre>\n        <code>\n          <div>store.user: {JSON.stringify(user, null, 4)}<br /><br /></div>\n        </code>\n      </pre>\n    </div>\n  );\n}\n\nexport default UserProfile;","import React from 'react';\nimport { useDispatch } from \"react-redux\";\n\nimport { userLoginRequest } from './user-actions'\nimport UserProfile from './UserProfile'\nimport {ICredentials} from './user-types'\n\n/**\n * Login Form\n *\n * @param {Function} dispatchUserLoginRequest dispatch action to start saga worker login\n */\n  const UserLogin: React.FC = () => {\n\n  const dispatch = useDispatch();\n\n  const [name, setName] = React.useState(\"manager\");\n  const [pass, setPass] = React.useState(\"1234\");\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    const payload: ICredentials = { name: name, pass: pass };\n    dispatch(userLoginRequest(payload));\n  }\n\n  return (\n    <div>\n      <h2>User Login</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Username\"\n          onChange={(e) => setName(e.target.value)}\n          value={name}\n        />\n        <input\n          type=\"password\"\n          name=\"pass\"\n          placeholder=\"Password\"\n          onChange={(e) => setPass(e.target.value)}\n          value={pass}\n        />\n        <input\n          type=\"submit\"\n          placeholder=\"Login\"\n          value=\"Submit\"\n        />\n      </form>\n      <UserProfile />\n    </div>\n  );\n}\n\nexport default UserLogin;","function isObject(object: object) {\n  return object != null && typeof object === 'object';\n}\n\n// Compare Objects -----------------------------------\n// from:\n// https://dmitripavlutin.com/how-to-compare-objects-in-javascript/\n// https://github.com/panzerdp/dmitripavlutin.com/blob/master/content/posts/083-compare-objects/index.md\n//\nexport function compareObjects(object1: any, object2: any) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    const areObjects = isObject(val1) && isObject(val2);\n    if (\n      (areObjects && !compareObjects(val1, val2)) ||\n      (!areObjects && val1 !== val2)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport { connect } from 'react-redux'\nimport { Link } from \"react-router-dom\";\nimport { AppState } from './../index-reducers'\n\ninterface IProps {\n  to: any;\n  title: any;\n  urlParams: any;\n}\n\n/**\n * Renders a pager item\n *\n * @param {string} to        - Destination url\n * @param {string} title     - Menu item label\n * @param {string} urlParams   Current URL parameters\n *\n * @example\n *\n *     <PagerLink\n *        to={2}\n *        title={'NEXT'}\n *        urlParams={\n *          items:0,\n *          limit: 10,\n *          offset:0,\n *          page:1,\n *          search: \"\",\n *          terms: \"some tag\"\n *        }\n *     />\n *\n */\nconst PagerLink: React.FC<IProps> = ({ to, title, urlParams }) => {\n\n  /** include the taxonomy term if needed */\n  if (typeof (urlParams.terms) !== 'undefined') {\n    if (urlParams.terms !== '') {\n      return <Link to={\"/?terms=\" + urlParams.terms + \"&offset=\" + to}>\n        {title + \" : \" + to}\n      </Link>\n    }\n  }\n\n/** the url does not have any taxonomy term parameters */\n  return <Link to={\"/?offset=\" + to}>{title + \" : \" + to}</Link>\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  urlParams: state.api.urlParams,\n})\n\nexport default connect(mapStateToProps, null)(PagerLink)","import React from 'react';\nimport { useSelector } from \"react-redux\";\n\nimport PagerLink from './PagerLink'\nimport { AppState } from './../index-reducers'\n\n/**\n * Render the Pager for Articles\n *\n * Used by: /src/Articles/Articles.tsx\n * Using: drupal backend response saved in redux store\n *\n */\nconst Pager: React.FC = () => {\n  const urlParams = useSelector((state: AppState) => state.api.urlParams);\n  const pager = useSelector((state: AppState) => state.api.pager);\n\n  return (\n    <div>\n      <button type=\"button\" disabled={!pager.first}>\n        {\n          pager.first ? (\n            <PagerLink to={pager.first} title={'FIRST'} urlParams={urlParams} />\n          ) : ('[FIRST]')\n        }\n      </button>\n      <button type=\"button\" disabled={!pager.prev}>\n        {\n          pager.prev ? (\n            <PagerLink to={pager.prev} title={'PREV'} urlParams={urlParams} />\n          ) : ('[PREV]')\n        }\n      </button>\n      <button type=\"button\" disabled={!pager.next}>\n        {\n          pager.next ? (\n            <PagerLink to={pager.next} title={'NEXT'} urlParams={urlParams} />\n          ) : ('[NEXT]')\n        }\n      </button>\n      <button type=\"button\" disabled={!pager.last}>\n        {\n          pager.last ? (\n            <PagerLink to={pager.last} title={'LAST'} urlParams={urlParams} />\n          ) : ('[END]')\n        }\n      </button>\n    </div>\n  );\n}\n\nexport default Pager;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { getArticles } from './articles-actions'\nimport { setApiUrlParams } from '../api/api-actions'\nimport { compareObjects } from '../utils/compareObjects'\nimport { AppState } from '../index-reducers'\nimport Pager from '../pager/Pager'\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Articles: React.FC<any> = () => {\n  const loading = useSelector((state: AppState) => state.api.loading);\n  const loaded = useSelector((state: AppState) => state.api.loaded);\n  const articles = useSelector((state: AppState) => state.articles.data);\n  const storeParams = useSelector((state: AppState) => state.api.urlParams);\n  var query: any = useQuery();\n  const dispatch = useDispatch();\n\n   /**\n   * @type {object} urlParams - URL parameters in the browser\n   */\n  const urlParams: any = {\n    terms: query.get('terms') || '',\n    search: query.get('search') || '',\n    offset: parseInt(query.get('offset')) || 0,\n    page: parseInt(query.get('page')) || 1,\n    items: parseInt(query.get('items')) || 0,\n    limit: parseInt(query.get('limit')) || 2,\n  }\n\n  React.useEffect(() => {\n    /**\n     * If the browser URL params has been change\n     * update the store.api.urlParams and\n     * get the new list of articles\n     *\n     * @type {object} urlParams - parameter in the browser\n     * @type {object} storeParams - parameter in the redux\n     */\n    if (!compareObjects(urlParams, storeParams)) {\n      dispatch(setApiUrlParams(urlParams))\n      dispatch(getArticles(urlParams))\n    }\n  }, [\n    dispatch,\n    urlParams,\n    storeParams,\n  ]);\n\n  return (\n    <div>\n      <p>{urlParams.terms !== '' && \"articles with terms: \" + urlParams.terms}</p>\n      {\n        !loading && loaded && articles\n          ? (\n            articles.map((item: any, i: number) => {\n\n              /** render terms */\n              // console.log(\"item.field_tags\", item.field_tags)\n              let terms = ''\n              terms = item.field_tags.map((term: any, i: number) => {\n                return (\n                  <div key={i}>\n                    <Link to={\"/?terms=\" + term.name}>{term.name}</Link>\n                  </div>\n                )\n              })\n\n              /** render image */\n              var image: any = ''\n              var imageobject: any = ''\n              if (item.field_image.image_style_uri) {\n                imageobject = item.field_image.image_style_uri;\n                imageobject.forEach(function (item: any) {\n                  if (item.thumbnail) {\n                    image = item.thumbnail\n                  }\n                })\n              }\n\n              /** render article */\n              return (\n                <div key={i} style={{ marginBottom: \"20px\" }}>\n                  <Link to={item.path.alias}>\n                    <h4 style={{ marginBottom: \"0px\" }}>{item.title}</h4>\n                    <img src={image} alt=\"Girl in a jacket\"></img>\n                  </Link>\n                  {terms}\n                </div>\n              )\n            })\n          )\n          : ( <div>Loading...</div> )\n      }\n      <Pager />\n    </div>\n  );\n}\n\nexport default Articles;","import {\n  SET_LOADING_ON,\n  SET_LOADING_OFF,\n  SET_API_URL_PARAMS,\n  SET_API_PAGER_LINKS,\n  SET_LOADED_TRUE,\n  SET_LOADED_FALSE,\n} from '../common/constants'\n\nimport {\n  ISetApiUrlParams,\n  ISetApiPagerLinks,\n} from './api-types'\n\nexport const setLoadedTrue = () => ({\n  type: SET_LOADED_TRUE\n});\n\nexport const setLoadedFalse = () => ({\n  type: SET_LOADED_FALSE\n});\n\nexport const setLoadingOn = () => ({\n  type: SET_LOADING_ON\n});\n\nexport const setLoadingOff = () => ({\n  type: SET_LOADING_OFF\n});\n\nexport const setApiUrlParams = (payload: ISetApiUrlParams) => ({\n  type: SET_API_URL_PARAMS,\n  payload\n})\n\nexport const setApiPagerLinks = (payload: ISetApiPagerLinks) => ({\n  type: SET_API_PAGER_LINKS,\n  payload\n});\n","import {\n  GET_ARTICLES,\n  SET_ARTICLES\n} from '../common/constants'\n\nimport {\n  IGetArticles,\n  ISetArticles\n} from './articles-types'\n\nexport const getArticles = (payload: IGetArticles) => ({\n  type: GET_ARTICLES,\n  payload\n});\n\nexport const setArticles = (payload: ISetArticles) => ({\n  type: SET_ARTICLES,\n  payload\n});\n","import React from 'react';\nimport { Link } from \"react-router-dom\"\n\ninterface IProps {\n  name: string;\n}\n\n/**\n * Render a taxonomy term link\n *\n * Using: the name of the term\n * Used by: articles list and article page\n *\n * @param {string} tag - term alias from backend\n * @return {string}      term link for frontend\n*/\nconst TermLink: React.FC<IProps> = ({ name }) => {\n  const getLastItem = (thePath: string) => thePath.substring(thePath.lastIndexOf('/') + 1)\n  const link = <Link to={\"/?terms=\" + getLastItem(name)}> {name}</Link>\n  return link\n}\n\nexport default TermLink;","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\"\n\nimport { AppState } from '../index-reducers'\nimport { getArticle } from './article-actions'\nimport * as endpoint from '../api/endpoints'\nimport TermLink from '../common/TermLink'\n\nconst Article: React.FC = () => {\n\n  const loaded = useSelector((state: AppState) => state.api.loaded);\n  const loading = useSelector((state: AppState) => state.api.loading);\n  const article = useSelector((state: AppState) => state.article);\n  const dispatch = useDispatch();\n  var path: any = useParams();\n\n  React.useEffect(() => {\n    console.log(\"path\", path)\n    dispatch(getArticle(path))\n  }, [\n    path,\n    dispatch\n  ]);\n\n  return (\n    <div>\n      {\n        !loading && loaded && article.data\n          ? (\n            <div>\n              <h1>{article.data[0].title}</h1>\n              <div>{article.data[0].created}</div>\n              <div>\n                <img\n                  src={endpoint.BASE + \"/\" + article.data[0].field_image.uri.url}\n                  alt={article.data[0].title}\n                />\n              </div>\n              <div>{article.data[0].body.value.substring(0, 255)}</div>\n              <div>\n                {\n                  article.data[0].field_tags.lenght &&\n                  article.data[0].field_tags.map((tag: string, i: number) => {\n                    return (\n                      <span key={i}>\n                        <TermLink name={tag} />\n                      </span>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n          : (\n            <div>loading...</div>\n          )\n      }\n    </div>\n  );\n}\n\nexport default Article;","import {\n  GET_ARTICLE,\n  SET_ARTICLE,\n} from '../common/constants'\n\nimport {\n  IGetArticle,\n  ISetArticle\n} from './article-types'\n\nexport const getArticle = (payload: IGetArticle) => ({\n    type: GET_ARTICLE,\n    payload\n  });\n\nexport const setArticle = (payload: ISetArticle) => ({\n  type: SET_ARTICLE,\n  payload\n});","import React from 'react'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Dropzone from 'react-dropzone-uploader'\nimport CreatableSelect from 'react-select/creatable';\nimport { AppState } from '../index-reducers'\nimport {\n  postArticle,\n  postTag,\n  setArticleFile,\n  setArticleBody,\n  setArticleTags,\n  setArticleTitle,\n  getVocabulary,\n  setSelected,\n} from '../articlePost/articlePost-actions'\n\nimport * as endpoint from '../api/endpoints'\nimport 'react-dropzone-uploader/dist/styles.css'\n\nconst ArticlePost: React.FC = () => {\n\n  const files= useSelector((state: AppState) => state.articlePost.files);\n  const title= useSelector((state: AppState) => state.articlePost.title);\n  const body= useSelector((state: AppState) => state.articlePost.body);\n  const tags= useSelector((state: AppState) => state.articlePost.tags);\n  const vocabulary= useSelector((state: AppState) => state.articlePost.vocabulary);\n  const selected= useSelector((state: AppState) => state.articlePost.selected);\n  const csrf_token= useSelector((state: AppState) => state.user.csrf_token);\n\n  const dispatch = useDispatch();\n\n  /** used by the react-dropzone-uploader for the image field */\n  const [error_upload, setErrorUpload] = React.useState('');\n\n  const handleSumbitForm = (e: any) => {\n    e.preventDefault();\n    /**\n     * @type {object} payload - the body of POST request of\n     *     an article that contains an image and at least one\n     *     term. There is no validation yet\n     */\n    const payload: any = {\n      \"data\": {\n        \"type\": \"node--article\",\n        \"attributes\": {\n          \"title\": title,\n          \"body\": {\n            \"value\": body,\n            \"format\": \"plain_text\"\n          }\n        },\n        \"relationships\": {\n          \"field_image\": {\n            \"data\": {\n              \"type\": \"file--file\",\n              \"id\": files.id,\n              \"meta\": {\n                \"alt\": \"Json Uploaded Testing1\",\n                \"title\": \"Json Uploaded Testing1\",\n                \"width\": null,\n                \"height\": null\n              }\n            }\n          },\n          \"field_tags\": {\n            \"data\": tags\n          }\n        }\n      }\n    }\n    // console.log('dispatchPostArticle payload', payload)\n\n    /**\n     * Dispatch the POST_ARTICLE action that triggers the\n     * saga postArticleWorker to POST the article\n     *\n     * @param {object} payload - the POST request body\n     */\n    dispatch(postArticle(payload));\n  }\n\n  /**\n   * react-dropzone-uploader POST request parameters\n   * The react-dropzone-uploader uses his own xhr library\n   * and thus not using the api.js\n   *\n   * @param {object} file - The image or video file\n   * @param {object} meta - Meta data\n   */\n  const getUploadParams = async ({ file, meta }: any) => {\n    var body = file;\n    const url = endpoint.ARTICLE_POST_FILE;\n    const headers = {\n      \"Accept\": \"application/vnd.api+json\",\n      \"Content-Type\": \"application/octet-stream\",\n      \"Content-Disposition\": \"file; filename=\\\"\" + file.name + \"\\\"\",\n      \"X-CSRF-Token\": csrf_token,\n    }\n    console.log(\"body\", body)\n    console.log(\"headers\", headers)\n    return { url, headers, body }\n  }\n\n  /**\n   * IMAGE upload\n   *\n   * Using: react-dropzone-uploader component\n   *\n   * Gets the id of the new image just stored in backend\n   * api: https://github.com/fortana-co/react-dropzone-uploader/blob/8603b1892f568ef14f35ace5596c3f5b4b6381d3/docs/api.md\n   *\n   * @param {object} xhr - The fetcher\n   * @param {object} fileWithMeta - file callback functions\n   * @param {object} status - response status\n   *\n   */\n  const handleChangeStatus = ({ xhr }: any, fileWithMeta: any, status: any) => {\n    if (xhr) {\n      console.log('xhr', xhr)\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          const result = JSON.parse(xhr.response);\n          console.log('xhr.response', result)\n          if (result.hasOwnProperty('data')) {\n            dispatch(setArticleFile(result.data.id))\n          }\n          if (result.hasOwnProperty('errors')) {\n            status[0].remove()\n            setErrorUpload(fileWithMeta)\n            /**\n             * for some reason, the fileWithMeta gives the data of status\n             * and the status gives the data of the fileWithMeta\n             */\n            // console.log(\"handleChangeStatus status\", status);\n            // console.log(\"xhr.response fileWithMeta\", fileWithMeta);\n            // console.log('xhr.response result', result)\n            // console.log('xhr.response result.error', result.errors)\n          }\n        }\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    /** get a fresh vocabulary to fill the react-select options list */\n    const vocabName: any = \"tags\";\n    dispatch(getVocabulary(vocabName));\n  }, [dispatch]);\n\n  const tagPostBodyitem = (item: any) => {\n    return (\n      { \"type\": \"taxonomy_term--tags\", \"id\": item }\n    )\n  }\n\n  /**\n   * called from react-select when a tag added or removed\n   * save all selected values to store.articlePost.tags\n   *\n   * @param {string[]} value - term name\n   *     [{\"value\":\"00d9f5ee-9121-46c3\",\"label\":\"some tag\"}]\n   * @dispatch {string[]} ids - the selected terms\n   */\n  const handleSelectOnChange = (value: any) => {\n    console.log(\"handleSelectOnChange value\", JSON.stringify(value))\n    dispatch(setSelected(value))\n    if (value) {\n      /**\n       * @type {string[]} itds - format: {1234},{5678},{9012}\n       */\n      const ids = value.map((x: any) => tagPostBodyitem(x.value));\n\n      dispatch(setArticleTags(ids));\n    }\n  }\n\n  /**\n   * POST new tag\n   *\n   * Used by: react-select component\n   *\n   * @param {string} name - The name of the tag\n   * @dispatch {object} body - The body of POST request\n   */\n  const handleSelectOnCreate = (name: any) => {\n    // console.group('handleSelectOnCreate', name);\n    const body: any = {\n      \"data\": {\n        \"type\": \"taxonomy_term--tags\",\n        \"attributes\": {\n          \"name\": name\n        }\n      }\n    }\n    dispatch(postTag(body));\n  }\n\n  return (\n    <div>\n      <form\n        onSubmit={handleSumbitForm}\n        style={{ margin: '10px' }}\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          onChange={(event: any) => dispatch(setArticleTitle(event.target.value))}\n          value={title || ''}\n          style={{ margin: '10px 0px' }}\n        />\n        <Dropzone\n          multiple={false}\n          maxFiles={1}\n          getUploadParams={getUploadParams}\n          onChangeStatus={handleChangeStatus}\n          accept=\"image/*,audio/*,video/*\"\n          inputContent={(files, extra) => (extra.reject ? 'Image, audio and video files only' : 'Drag Files')}\n          styles={{\n            dropzoneReject: { borderColor: 'red', backgroundColor: '#DAA' },\n            inputLabel: (files, extra) => (extra.reject ? { color: 'red' } : {}),\n\n          }}\n        />\n        {error_upload}<br />\n        <textarea\n          name=\"body\"\n          placeholder=\"Body\"\n          onChange={(event: any) => dispatch(setArticleBody(event.target.value))}\n          value={body || ''}\n          style={{ margin: '10px 0px' }}\n        ></textarea>\n        <CreatableSelect\n          placeholder={'Creatable Multi Select'}\n          isMulti\n          value={selected}\n          isClearable\n          options={vocabulary}\n          onChange={handleSelectOnChange}\n          onCreateOption={handleSelectOnCreate}\n          style={{ margin: '10px 0px' }}\n        />\n        <input\n          type=\"submit\"\n          placeholder=\"Send\"\n          value=\"Submit\"\n          style={{ margin: '10px 0px' }}\n        />\n      </form>\n      <div style={{ backgroundColor: \"#f4f4f4\", padding: \"10px\" }}>\n        <code >\n          <div><strong>store.articlePost.title:</strong> {JSON.stringify(title)}</div><br />\n          <div><strong>store.articlePost.files:</strong> {JSON.stringify(files)}</div><br />\n          <div><strong>store.articlePost.body:</strong> {JSON.stringify(body)}</div><br />\n          <div><strong>store.articlePost.tags:</strong> {JSON.stringify(tags)}</div><br />\n          <div><strong>store.articlePost.selected:</strong> {JSON.stringify(selected)}</div><br />\n        </code>\n      </div>\n    </div>\n  )\n}\n\nexport default ArticlePost;","import {\n  POST_ARTICLE,\n  POST_ARTICLE_FILE,\n  POST_TAG,\n  SET_ARTICLE_FILE,\n  SET_ARTICLE_TITLE,\n  SET_ARTICLE_BODY,\n  SET_ARTICLE_TAGS,\n  GET_VOCABULARY,\n  SET_VOCABULARY,\n  SET_SELECTED,\n  GET_SELECTED,\n  ADD_SELECTED,\n} from '../common/constants'\n\nimport {\n  IGetSelected,\n  ISetSelected,\n  IAddSelected,\n  IGetVocabulary,\n  ISetVocabulary,\n  IPostArticle,\n  IPostArticleFile,\n  IPostTag,\n  ISetArticleFile,\n  ISetArticleTitle,\n  ISetArticleBody,\n  ISetArticleTags,\n} from './articlePost-types'\n\nexport const getSelected = (payload: IGetSelected) => ({\n  type: GET_SELECTED,\n  payload\n});\n\nexport const setSelected = (payload: ISetSelected) => ({\n  type: SET_SELECTED,\n  payload\n});\n\nexport const addSelected = (payload: IAddSelected) => ({\n  type: ADD_SELECTED,\n  payload\n});\n\nexport const getVocabulary = (payload: IGetVocabulary) => ({\n  type: GET_VOCABULARY,\n  payload\n});\n\nexport const setVocabulary = (payload: ISetVocabulary) => ({\n  type: SET_VOCABULARY,\n  payload\n});\n\nexport const postArticle = (payload: IPostArticle) => ({\n  type: POST_ARTICLE,\n  payload\n});\n\nexport const postArticleFile = (payload: IPostArticleFile) => ({\n  type: POST_ARTICLE_FILE,\n  payload\n});\n\nexport const postTag = (payload: IPostTag) => ({\n  type: POST_TAG,\n  payload\n});\n\nexport const setArticleFile = (payload: ISetArticleFile) => ({\n  type: SET_ARTICLE_FILE,\n  payload\n});\n\nexport const setArticleTitle = (payload: ISetArticleTitle) => ({\n  type: SET_ARTICLE_TITLE,\n  payload\n});\n\nexport const setArticleBody = (payload: ISetArticleBody) => ({\n  type: SET_ARTICLE_BODY,\n  payload\n});\n\nexport const setArticleTags = (payload: ISetArticleTags) => ({\n  type: SET_ARTICLE_TAGS,\n  payload\n});","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport RouteProtected from './utils/RouteProtected';\nimport Header from './header/Header'\nimport UserLogin from './user/UserLogin'\nimport UserProfile from './user/UserProfile'\nimport Articles from './articles/Articles'\nimport Article from './article/Article'\nimport ArticlePost from './articlePost/ArticlePost'\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path=\"/user/login\" component={UserLogin} />\n        <Route path=\"/user/profile\" component={UserProfile} />\n        <RouteProtected path=\"/article/create\" component={ArticlePost} />\n        <Route path=\"/article/:path\" component={Article} />\n        <Route exact path=\"/:path?\" component={Articles} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from \"react-router-dom\";\n\nimport { saveState } from './state/localStorage'\nimport store from './state/store'\nimport history from \"./state/history\";\n\nimport './index.css';\nimport App from './App';\n\n\nstore.subscribe(() => {\n  saveState({\n    store: store.getState()\n  });\n});\n\nReactDOM.render(\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// import * as serviceWorker from './serviceWorker';\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}